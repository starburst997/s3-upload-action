name: 'S3 Upload Action'
description: 'Simple upload to S3 with rotating version folders'
author: 'Jean-Denis Boivin'

inputs:
  key-id:
    description: 'Your S3 Key ID'
    required: true
  secret-access-key:
    description: 'Your S3 Secret Access Key'
    required: true
  bucket:
    description: 'Your S3 Bucket'
    required: true
  region:
    description: 'S3 Region'
    default: 'us-east-1'
    required: false
  endpoint:
    description: 'Needed if you use a clone (ex; DigitalOcean Space)'
    required: false

  src-dir:
    description: 'Source directory to upload'
    required: true
  dst-dir:
    description: 'Destination in S3'
    required: true
  dst-version:
    description: 'Name of your folder using version convention'
    required: true
  keep:
    description: 'Number of release to keeps'
    default: 5
    required: false

runs:
  using: "composite"
  steps:
    - name: Display message
      shell: bash
      run: echo "S3 Upload Action..."
      
    - name: Set envs
      shell: bash
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ inputs.key-id }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ inputs.secret-access-key }}" >> $GITHUB_ENV
        echo "AWS_DEFAULT_REGION=${{ inputs.region }}" >> $GITHUB_ENV
        echo "AWS_ENDPOINT_URL=${{ inputs.endpoint }}" >> $GITHUB_ENV

    - name: Upload to S3 (non .br)
      shell: bash
      run: |
        aws s3 cp ${{ inputs.src-dir }} s3://${{ inputs.bucket }}/${{ inputs.dst-dir }}/${{ inputs.dst-version }}/ --recursive --acl public-read --cache-control 'max-age=31536000, immutable' --exclude '*.br'

    - name: Install brotli
      uses: starburst997/action-br@v1

    # Save decompressed filesize + set correct content-encoding
    - name: Upload to S3 (.br)
      shell: bash
      run: |
        for file in $(find ${{ inputs.src-dir }} -name '*.br');
        do
          brotli -d -f $file || continue
          aws s3 cp $file s3://${{ inputs.bucket }}/${{ inputs.dst-dir }}/${{ inputs.dst-version }}/${file##${{ inputs.src-dir }}/} --acl public-read --cache-control 'max-age=31536000, immutable' --content-encoding 'br' --metadata '{"Decompressed":"'$(stat -c %s ${file%*.br})'"}' || continue
        done

    - name: Delete older folders
      if: ${{ inputs.dst-dir != '' }}
      shell: bash
      run: |
        aws s3 ls s3://${{ inputs.bucket }}/${{ inputs.dst-dir }}/ | awk '{print $2}' > ls.txt
        sort -r -V ls.txt > ls-sort.txt
        tail -n +$((${{ inputs.keep }} + 1)) ls-sort.txt > ls-delete.txt
        while read p; do
          echo "Deleting: $p"
          aws s3 rm --recursive s3://${{ inputs.bucket }}/${{ inputs.dst-dir }}/$p
        done <ls-delete.txt
        rm ls.txt
        rm ls-sort.txt
        rm ls-delete.txt
